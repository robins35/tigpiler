structure A = Absyn

fun sym(s) = Symbol.symbol(s)

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm
    exp of A.exp | program of A.exp
    | decs of A.dec list | dec of A.dec
    | tydec of A.dec | tydecs of {name: A.symbol, ty: A.ty, pos: pos} list
    | ty of A.ty | tyfields of A.field list
    | vardec of A.dec 
    | fundec of A.dec | fundecs of {name: A.symbol, params: A.field list, result: (A.symbol * pos) option, body: A.exp, pos: pos} list
    | lvalue of A.var
    | expseq of A.exp | exps of (A.exp * pos) list | expList of A.exp list | expL of A.exp list
    | funcall of A.exp
    | arith of A.exp | comp of A.exp| boolop of A.exp 
    | assign of A.exp
    | recinst of A.exp| aggregateSeq of (Absyn.symbol * Absyn.exp * pos) list| arrayinst of A.exp
    | ifblock of A.exp| whileblock of A.exp| forblock of A.exp| letblock of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")
%right ELSE DO ASSIGN THEN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left OF
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program	: exp				                                        (exp)

exp: lvalue													        (A.VarExp(lvalue))
	| NIL		                                                    (A.NilExp)
    | ID                                                            (A.VarExp(A.SimpleVar(sym(ID), IDleft)))
	| assign												        (assign)
	| INT													        (A.IntExp(INT))
	| STRING												        (A.StringExp(STRING, STRINGleft))
	| recinst												        (recinst)
	| arrayinst												        (arrayinst)
	| LPAREN RPAREN                                                 (A.SeqExp[])
	| LPAREN expseq RPAREN										    (expseq)
	| ifblock												        (ifblock)
	| whileblock											        (whileblock)
	| forblock												        (forblock)
	| letblock												        (letblock)
	| BREAK													        (A.BreakExp(BREAKleft))
	| funcall												        (funcall)
	| arith													        (arith)
	| comp													        (comp)
	| boolop												        (boolop)

lvalue: ID DOT ID                                                   (A.FieldVar(A.SimpleVar(sym(ID1), ID1left), sym(ID2), ID1left))
    | lvalue DOT ID                                                 (A.FieldVar(lvalue, sym(ID), lvalueleft))
    | ID LBRACK exp RBRACK                                          (A.SubscriptVar(A.SimpleVar(sym(ID), IDleft), exp, IDleft))
    | lvalue LBRACK exp RBRACK                                      (A.SubscriptVar(lvalue, exp, lvalueleft))

assign: ID ASSIGN exp                                               (A.AssignExp({var = A.SimpleVar(sym(ID), IDleft), exp = exp, pos = IDleft}))
    | lvalue ASSIGN exp									            (A.AssignExp({var = lvalue, exp = exp, pos = lvalueleft}))

recinst: ID LBRACE RBRACE                                           (A.RecordExp({fields = [], typ = sym(ID), pos = IDleft}))
| ID LBRACE aggregateSeq RBRACE                                     (A.RecordExp({fields = aggregateSeq, typ = sym(ID), pos = IDleft}))

aggregateSeq: ID EQ exp                                             ([(sym(ID), exp, IDleft)])
| aggregateSeq COMMA ID EQ exp                                      (aggregateSeq @ [(sym(ID), exp, aggregateSeqleft)] )

arrayinst: ID LBRACK exp RBRACK OF exp                              (A.ArrayExp({typ = sym(ID), size = exp1, init = exp2, pos = IDleft}))

ifblock: IF exp THEN exp ELSE exp                                   (A.IfExp({test = exp1, then' = exp2, else' = SOME exp3, pos = IFleft}))
    | IF exp THEN exp                                               (A.IfExp({test = exp1, then' = exp2, else' = NONE, pos = IFleft}))

whileblock: WHILE exp DO exp                                        (A.WhileExp({test = exp1, body = exp2, pos = WHILEleft}))

forblock: FOR ID ASSIGN exp TO exp DO exp                           (A.ForExp({var = sym(ID),
															                escape = ref true,
															                lo = exp1,
															                hi = exp2,
															                body = exp3,
															                pos = FORleft}))
    
letblock: LET decs IN expseq END                                    (A.LetExp({decs = decs, body = expseq, pos = LETleft})) 

decs: dec          			                                        ([dec])
    | dec decs                                                      (decs @ [dec] )

dec: tydec				                                            (tydec)
    | vardec				                                        (vardec)
    | fundec				                                        (fundec)

tydec: tydecs			                                            (A.TypeDec(tydecs))

tydecs: TYPE ID EQ ty                                               ([{name = sym(ID), ty = ty, pos = TYPEleft}])
    | TYPE ID EQ ty tydecs                                          ([{name = sym(ID), ty = ty, pos = TYPEleft}] @ tydecs)
   

ty: ID 	       	  			                                        (A.NameTy(sym(ID), IDleft))
    | LBRACE RBRACE                                                 (A.RecordTy([]))
    | LBRACE tyfields RBRACE		                                (A.RecordTy(tyfields))
    | ARRAY OF ID											        (A.ArrayTy(sym(ID), ARRAYleft))

tyfields: ID COLON ID			                                    ([{name = sym(ID1),
															                escape = ref true,
															                typ = sym(ID2),
															                pos = ID1left}])
	| ID COLON ID COMMA tyfields	                                ([{name = sym(ID1),
																		        escape = ref true,
																		        typ = sym(ID2),
																		        pos = ID1left}] @ tyfields)

vardec: VAR ID ASSIGN exp                                           (A.VarDec({name = sym(ID),
																	        escape = ref true,
																	        typ = NONE,
																	        init = exp,
																	        pos = VARleft}))
    | VAR ID COLON ID ASSIGN exp                                    (A.VarDec({name = sym(ID),
																	        escape = ref true,
																	        typ = SOME (sym(ID2), ID2left),
																	        init = exp,
																	        pos = VARleft}))
																	
fundec: fundecs                                                     (A.FunctionDec(fundecs))
																	
								

fundecs: FUNCTION ID LPAREN RPAREN EQ exp fundecs                   ([{name = sym(ID),
															                params = [],
															                result = NONE,
															                body = exp,
															                pos = FUNCTIONleft}] @ fundecs)
    | FUNCTION ID LPAREN tyfields RPAREN EQ exp fundecs             ([{name = sym(ID),
																			params = tyfields,
																			result = NONE,
																			body = exp,
																			pos = FUNCTIONleft}] @ fundecs)
    | FUNCTION ID LPAREN RPAREN COLON ID EQ exp fundecs             ([{name = sym(ID1),
																			params = [],
																			result = SOME (sym(ID2),
																			ID2left),
																			body = exp,
																			pos = FUNCTIONleft}] @ fundecs)
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundecs    ([{name = sym(ID1),
																			params = tyfields,
																			result = SOME (sym(ID2),
																			ID2left),
																			body = exp,
																			pos = FUNCTIONleft}] @ fundecs)
    |                                                               ([])

funcall: ID expList                                                 (A.CallExp({func = sym(ID), args = expList, pos = IDleft}))	

arith: exp PLUS exp			                                        (A.OpExp({left = exp1,
																	        oper = A.PlusOp,
																	        right = exp2,
																	        pos = exp1left}))
	| exp MINUS exp			                                        (A.OpExp({left = exp1,
																	        oper = A.MinusOp,
																	        right = exp2,
																	        pos = exp1left}))
	| exp TIMES exp			                                        (A.OpExp({left = exp1,
																	        oper = A.TimesOp,
																	        right = exp2,
																	        pos = exp1left}))
	| exp DIVIDE exp		                                        (A.OpExp({left = exp1,
																	        oper = A.DivideOp,
																	        right = exp2,
																	        pos = exp1left}))
	| MINUS exp 	%prec UMINUS	                                (A.OpExp({left = A.IntExp(0),
																	        oper = A.MinusOp,
																	        right = exp,
																	        pos = MINUSleft}))
	

comp: exp EQ exp			                                (A.OpExp({left = exp1,
																	oper = A.EqOp,
																	right = exp2,
																	pos = exp1left}))
	| exp NEQ exp			                                (A.OpExp({left = exp1,
																	oper = A.NeqOp,
																	right = exp2,
																	pos = exp1left}))
	| exp GT exp			                                (A.OpExp({left = exp1,
																	oper = A.GtOp,
																	right = exp2,
																	pos = exp1left}))
	| exp LT exp			                                (A.OpExp({left = exp1,
																	oper = A.LtOp,
																	right = exp2,
																	pos = exp1left}))
	| exp GE exp			                                (A.OpExp({left = exp1,
																	oper = A.GeOp,
																	right = exp2,
																	pos = exp1left}))
	| exp LE exp			                                (A.OpExp({left = exp1,
																	oper = A.LeOp,
																	right = exp2,
																	pos = exp1left}))

boolop: exp AND exp			                                (A.IfExp({test = exp1,
																	then' = exp2,
																	else' = SOME (A.IntExp(0)),
																	pos = exp1left}))
	|exp OR exp			                                    (A.IfExp({test = exp1,
																	then' = A.IntExp(1),
																	else' = SOME exp2,
																	pos = exp1left}))

expseq: exps											    (A.SeqExp(exps))

exps : exp                                                  ([(exp, expleft)])
    | exp SEMICOLON exps                                    ([(exp, expleft)] @ exps)

expList : LPAREN RPAREN                                     ([])
    | LPAREN expL RPAREN                                    (expL)

expL : exp                                                  ([exp])
    | exp COMMA expL                                        ([exp] @ expL)



